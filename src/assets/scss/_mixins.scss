@mixin box-shadow-with-hover(
	$size: 8px,
	$fade: 10px,
	$x-shift: 0px,
	$y-shift: 4px,
	$color: rgba(0,0,0,0.1),
	$color-hover: rgba(0,0,0,0.3)
	) {
	transition: 1s;
	box-shadow: $color $x-shift $y-shift $fade $size;
	&:hover {
		box-shadow: $color-hover $x-shift $y-shift $fade $size;
	}
}

@mixin box-shadow(
	$size: 8px,
	$fade: 10px,
	$x-shift: 0px,
	$y-shift: 4px,
	$color: rgba(0,0,0,0.1),
	$transition: 1s
	) {
	transition: $transition;
	box-shadow: $color $x-shift $y-shift $fade $size;
}

@mixin svg-aspect-ratio-wrapper() {
	position: relative;
    &:before{
        display: block;
        content: " ";
        width: 100%;
		//the padding of the psuedo element creats the space for the child element to fill, achieving the constant aspect ratio
		padding-top: 80%;
        padding-top: var(--ratio);
    }
	//this mixin must wrap a single element (the element that should preserve its aspect ratio)
    > * {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}

@mixin square-diagonal-split($args) {
	&.#{map-get($args, className)} {
		$rotate: if(map-get($args, rotate), map-get($args, rotate), 0deg);
		$z-index: if(map-get($args, z-index), map-get($args, z-index), 1);
		$visible-opacity: if(map-get($args, visible-opacity), map-get($args, visible-opacity), 1);
		$dark-before-gradient-dir: if(map-get($args, dark-before-gradient-dir), map-get($args, dark-before-gradient-dir), to right);
		$dark-after-gradient-dir: if(map-get($args, dark-after-gradient-dir), map-get($args, dark-after-gradient-dir), to bottom);
		$light-before-gradient-dir: if(map-get($args, light-before-gradient-dir), map-get($args, light-before-gradient-dir), to right);
		$light-after-gradient-dir: if(map-get($args, light-after-gradient-dir), map-get($args, light-after-gradient-dir), to right);
        height: map-get($args, height) * 1px;
        width: map-get($args, width) * 1px;
        right: map-get($args, right) * 1px;
        top: map-get($args, top) * 1px;
        z-index: $z-index;
        transform: rotate($rotate);
		overflow: hidden;
		display: inline-block;
        &.dark.visible::before,
        &.dark.visible::after,
        &.light.visible::before,
        &.light.visible::after {
            opacity: $visible-opacity;
        }
        &::before {
            transition: 1s;
            opacity: 0;
            content: '';
            position: absolute;
            height: map-get($args, height) * 1px;
            width: map-get($args, width) * 1px;
        }
        &::after {
            transition: 1s;
            opacity: 0;
            content: '';
            position: absolute;
            height: map-get($args, height) * 1.414px;
            width: map-get($args, width) * 0.75px;
            left: map-get($args, width) * -.25px;
            top: map-get($args, height) * -.207px;
            transform-origin: center right;
            transform: rotate(-45deg);
        }
        &.dark {
            &::before { background: linear-gradient($dark-before-gradient-dir, map-get($args, dark-before-one), map-get($args, dark-before-two)); }
            &::after { background: linear-gradient($dark-after-gradient-dir, map-get($args, dark-after-one), map-get($args, dark-after-two)); }
        }
        &.light {
            &::before { background: linear-gradient($light-before-gradient-dir, map-get($args, light-before-one), map-get($args, light-before-two)); }
            &::after { background: linear-gradient($light-after-gradient-dir, map-get($args, light-after-one), map-get($args, light-after-two)); }
        }
    }
}

@mixin square-diagonal-split-rem($args) {
	&.#{map-get($args, className)} {
		$rotate: if(map-get($args, rotate), map-get($args, rotate), 0deg);
		$z-index: if(map-get($args, z-index), map-get($args, z-index), 1);
		$visible-opacity: if(map-get($args, visible-opacity), map-get($args, visible-opacity), 1);
		$dark-before-gradient-dir: if(map-get($args, dark-before-gradient-dir), map-get($args, dark-before-gradient-dir), to right);
		$dark-after-gradient-dir: if(map-get($args, dark-after-gradient-dir), map-get($args, dark-after-gradient-dir), to bottom);
		$light-before-gradient-dir: if(map-get($args, light-before-gradient-dir), map-get($args, light-before-gradient-dir), to right);
		$light-after-gradient-dir: if(map-get($args, light-after-gradient-dir), map-get($args, light-after-gradient-dir), to right);
        height: map-get($args, height) * 1rem;
        width: map-get($args, width) * 1rem;
        right: map-get($args, right) * 1rem;
        top: map-get($args, top) * 1rem;
        z-index: $z-index;
        transform: rotate($rotate);
		overflow: hidden;
		display: inline-block;
        &.dark.visible::before,
        &.dark.visible::after,
        &.light.visible::before,
        &.light.visible::after {
            opacity: $visible-opacity;
        }
        &::before {
            transition: 1s;
            opacity: 0;
            content: '';
            position: absolute;
            height: map-get($args, height) * 1rem;
            width: map-get($args, width) * 1rem;
        }
        &::after {
            transition: 1s;
            opacity: 0;
            content: '';
            position: absolute;
            height: map-get($args, height) * 1.414rem;
            width: map-get($args, width) * 0.75rem;
            left: map-get($args, width) * -.25rem;
            top: map-get($args, height) * -.207rem;
            transform-origin: center right;
            transform: rotate(-45deg);
        }
        &.dark {
            &::before { background: linear-gradient($dark-before-gradient-dir, map-get($args, dark-before-one), map-get($args, dark-before-two)); }
            &::after { background: linear-gradient($dark-after-gradient-dir, map-get($args, dark-after-one), map-get($args, dark-after-two)); }
        }
        &.light {
            &::before { background: linear-gradient($light-before-gradient-dir, map-get($args, light-before-one), map-get($args, light-before-two)); }
            &::after { background: linear-gradient($light-after-gradient-dir, map-get($args, light-after-one), map-get($args, light-after-two)); }
        }
    }
}

@mixin curve($args) {
    &##{map-get($args, id)} {
        top: map-get($args, top);
        right: map-get($args, right);
        width: map-get($args, width);
        height: map-get($args, height);
        border-radius: 50%;
        border: map-get($args, border);
        transform: map-get($args, transform);
        z-index: map-get($args, z-index);
        // background-color: yellow;
    }
}